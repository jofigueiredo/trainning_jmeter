<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0 r1840935">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Trainning - Backup" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="defHost" elementType="Argument">
            <stringProp name="Argument.name">defHost</stringProp>
            <stringProp name="Argument.value">192.168.56.1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="defPort" elementType="Argument">
            <stringProp name="Argument.name">defPort</stringProp>
            <stringProp name="Argument.value">8080</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">password</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="delimiterCsv" elementType="Argument">
            <stringProp name="Argument.name">delimiterCsv</stringProp>
            <stringProp name="Argument.value">\t</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="delimiter1st" elementType="Argument">
            <stringProp name="Argument.name">delimiter1st</stringProp>
            <stringProp name="Argument.value">|</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="delimiter2nd" elementType="Argument">
            <stringProp name="Argument.name">delimiter2nd</stringProp>
            <stringProp name="Argument.value">,</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="rampUpDivisor" elementType="Argument">
            <stringProp name="Argument.name">rampUpDivisor</stringProp>
            <stringProp name="Argument.value">0.7</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="setUp Plan - Settings Properties" enabled="true">
          <stringProp name="IncludeController.includepath">C:\Users\jofigueiredo\Documents\Work\trainning\trainning_jmeter\api\src\test\resources\keywords\setUp\setUpProperties.jmx</stringProp>
        </IncludeController>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="backup" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(countLines)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(rampUp)}</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP HM Admin Authorization" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">${adminLogin}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">*/*</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${__P(csvFile)}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">${__P(csvColumns)}</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">${delimiterCsv}</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import org.apache.jmeter.engine.util.CompoundVariable
import java.net.URLEncoder

String password = vars.get(&quot;password&quot;)
String userAgent = vars.get(&quot;user-agent&quot;)
String user = vars.get(&quot;userRole&quot;)

// Override Variables Values
if (user.length()&gt;0) {vars.put(&quot;user&quot;,user)}
if (userAgent.length()&gt;0) {vars.put(&quot;userAgent&quot;,userAgent)}
vars.put(&quot;userLogin&quot;, createAuthorization(user, password))
vars.put(&quot;adminLogin&quot;, createAuthorization(&quot;admin&quot;, password))

writeResponseMessage([&quot;userLogin&quot;, &quot;adminLogin&quot;, &quot;userAgent&quot;, &quot;user&quot;])

def createAuthorization(String user, String pass) { // USER SESSIONS
    if (user != null &amp;&amp; user.length() &gt; 0) {
        auth = (user + &quot;:&quot; + pass).bytes.encodeBase64().toString()
        return &quot;Basic &quot; + auth
    } else {
        return &quot;&quot;
    }
}

def evalVariable(String var) {
    // return an string with result of evaluation
    if (var != null &amp;&amp; var.contains(&quot;{&quot;)) {
        var = var.replace(&apos;{quote}&apos;,&apos;&quot;&apos;)
        CompoundVariable compoundVar = new CompoundVariable(var)
        return compoundVar.execute()
    }
    return var
}

def encodeVariable(String var) {
    // return an string encoded
    String str = java.net.URLEncoder.encode(var, &quot;UTF-8&quot;)
    return str.replaceAll(&quot;\\+&quot;, &quot;%20&quot;)
}

def writeResponseMessage(List lst) {
    def responseMessage = &quot;&quot;
    lst.each {it -&gt; responseMessage += &quot;$it = &quot; + vars.get(&quot;$it&quot;).toString() + &quot;\n&quot;}
    SampleResult.setResponseData(responseMessage, &quot;UTF-8&quot;)
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Backup" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="user-agent" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">FireFox</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">user-agent</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__property(hostname,,${defHost})}</stringProp>
            <stringProp name="HTTPSampler.port">${defPort}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">pentaho/api/repo/files/backup</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Performs a complete system back up of the Pentaho system. This includes content, schedules, users, roles, datasources, and the metastore.</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">String statusCode = vars.get(&quot;statusCode&quot;)
String responseCode = prev.getResponseCode()
String failureMessage = &quot;&quot;

// Assert Response Code
if ( responseCode == statusCode )
	 SampleResult.setSuccessful(true) // ignore status and dont fail when is expected error code
else {failureMessage += &quot;Expected &lt;response code&gt; [&quot; + statusCode + &quot;] but it got instead [&quot; + responseCode + &quot;]\n\n&quot;  }

// Trigger the Asseertion Error
if (failureMessage?.trim()) {
    failureMessage += &quot;URL: &quot; + SampleResult.getURL() + &quot;\n\n&quot;
    failureMessage += &quot;REQUEST HEADERS: &quot; + SampleResult.getRequestHeaders() + &quot;\n\n&quot;
    AssertionResult.setFailureMessage(failureMessage)
    AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
