<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Keywords" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="defHost" elementType="Argument">
            <stringProp name="Argument.name">defHost</stringProp>
            <stringProp name="Argument.value">localhost</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="defPort" elementType="Argument">
            <stringProp name="Argument.name">defPort</stringProp>
            <stringProp name="Argument.value">8080</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="apiFile" elementType="Argument">
            <stringProp name="Argument.name">apiFile</stringProp>
            <stringProp name="Argument.value">/pentaho/api/repo/files</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="apiUserRole" elementType="Argument">
            <stringProp name="Argument.name">apiUserRole</stringProp>
            <stringProp name="Argument.value">/pentaho/api/userroledao</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="delimiterCsv" elementType="Argument">
            <stringProp name="Argument.name">delimiterCsv</stringProp>
            <stringProp name="Argument.value">\t</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="delimiter1st" elementType="Argument">
            <stringProp name="Argument.name">delimiter1st</stringProp>
            <stringProp name="Argument.value">|</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="delimiter2nd" elementType="Argument">
            <stringProp name="Argument.name">delimiter2nd</stringProp>
            <stringProp name="Argument.value">,</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">password</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="rampUpDivisor" elementType="Argument">
            <stringProp name="Argument.name">rampUpDivisor</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
    </TestPlan>
    <hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="setUp" enabled="true"/>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="setUp Variables" enabled="true">
          <stringProp name="TestPlan.comments"> Create Authorization String for HTTP Header Manager
 Eval and encode the Path variable</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.jmeter.engine.util.CompoundVariable
import java.net.URLEncoder

String password = vars.get(&quot;password&quot;)
String path = vars.get(&quot;path&quot;)
// Create Authorization String for HTTP Header Manager
vars.put(&quot;userLogin&quot;, createAuthorization(vars.get(&quot;user&quot;), password))
vars.put(&quot;adminLogin&quot;, createAuthorization(&quot;admin&quot;, password))
// Eval and encode the Path variable
vars.put(&quot;path&quot;, evalVariable(path))
vars.put(&quot;path&quot;, encodeVariable(path))

def createAuthorization(String user, String pass) { // USER SESSIONS
    if (user.length() &gt; 0) {
        auth = (user + &quot;:&quot; + pass).bytes.encodeBase64().toString()
        return &quot;Basic &quot; + auth
    }
}

def evalVariable(String var) {
    // allows eval variable value from csv file example: ${__RandomString(3,n)} == &apos;nnn&apos;, ${__time(YYYYMMdd)} == 20180611
    if (var != null &amp;&amp; var.contains(&quot;{&quot;)) {
        CompoundVariable compoundVar = new CompoundVariable(var)
        return compoundVar.execute()
    }
    return var
}

def encodeVariable(String var) {
    String str = java.net.URLEncoder.encode(var, &quot;UTF-8&quot;)
    return str.replaceAll(&quot;\\+&quot;, &quot;%20&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="setUp Plan - Settings Properties" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.jmeter.services.FileServer
import org.apache.jmeter.functions.TestPlanName

def csvFile = new TestPlanName().execute().minus(&quot;.jmx&quot;) + &quot;.tsv&quot;
def dirPath = FileServer.getFileServer().getBaseDir()
def countLines = countCsvLines(dirPath, csvFile)

props.put(&quot;countLines&quot;, countLines) // Set jmeter property Total number of tests
props.put(&quot;rampUp&quot;, calculateRampUp(countLines, vars.get(&quot;rampUpDivisor&quot;)))
props.put(&quot;csvFile&quot;, csvFile)
props.put(&quot;csvColumns&quot;, getColumnsHeaders(dirPath, csvFile, vars.get(&quot;delimiterCsv&quot;)))

def calculateRampUp(def numberThreads, def rampUpDivisor) {
    double r = Double.parseDouble(rampUpDivisor)
    if (r != null &amp;&amp; r != 0) {
        return Math.round(numberThreads.toInteger() / r).toString()
    }
    return numberThreads
}

def countCsvLines(String directory, String file) {
    try {
        new File(directory, file).readLines().size() - 1 // -1 minus header
    } catch (e) {
        log.info(&quot;__________________ Script Warning: There is no file with path: &quot; + directory + &apos;\\&apos; + file)
        return &quot;&quot;
    }
}

def getColumnsHeaders(String directory, String file, String delimiter) {
    try {
        new File(directory, file).withReader {it.readLine().replaceAll(delimiter, &quot;,&quot;)}
    } catch (e) {
        log.info(&quot;__________________ Script Warning: There is no file with path: &quot; + directory + &apos;\\&apos; + file)
        return &quot;&quot;
    }
}
</stringProp>
          <stringProp name="TestPlan.comments">Get settings properties to run test suite
Given variables rampUpDivisor and delimiterCsv
When execute script
Then create &lt;properties&gt; 

countLines    : nº rows at csv file                    
rampUp         : division between nº rows and rampUpDivisor
csvFile           : name of csv file                         
csvColumns : list of columns in csv file  </stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="tearDown" enabled="true"/>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Delete Root Path" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
          <stringProp name="TestPlan.comments">  Delete Root Path
  Given variables csvFile, path, setUpData, delimiterCsv
  When setUpData contains &quot;path&quot; string
  Then get list of atomic paths # *1
  And Delete each path in List if path id exist

  *1 atomic paths are:
  The root file/directory to delete excluding default ones</stringProp>
        </TransactionController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Get Distint Root Paths to Delete" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.jmeter.services.FileServer

def dirPath = FileServer.getFileServer().getBaseDir()
String file = props.get(&quot;csvFile&quot;)
String delimiter = vars.get(&quot;delimiterCsv&quot;)
Integer posPath = getColumnPosition(dirPath, file, &quot;path&quot;, delimiter)
Integer posSetUpData = getColumnPosition(dirPath, file, &quot;setUpData&quot;, delimiter)

if (posPath &gt;= 0 &amp;&amp; posSetUpData &gt;= 0) {
    List pathList = getPathList(dirPath, file, posPath, posSetUpData, delimiter)
    List pathListToDelete = returnPathListToDelete(pathList)
    setIterateValues(pathListToDelete, &quot;path&quot;)
} else {
    setIterateValues(null, &quot;path&quot;)
}

def checkFileExist(String filePath) {
    file = new File(filePath)
    if (file.exists()) {
        return true
    } else {
        log.info(&quot;__________________ Script Warning: There is no file with path: &quot; + filePath)
        return false
    }
}

def getColumnPosition(String directory, String fileName, String column, String delimiter) {
    if (checkFileExist(directory + &quot;\\&quot; + fileName)) {
        new File(directory, fileName).withReader {lst = it.readLine().split(delimiter)}
        return lst.findIndexOf {it in [column]}
    } else {
        return -1
    }
}

def getPathList(String directory, String fileName, Integer posPath, Integer posSetUpData, String delimiter) {
    def pathList = []
    new File(directory, fileName).splitEachLine(delimiter) {
        it -&gt;
            if (it[posSetUpData] != null &amp;&amp; it[posSetUpData].toLowerCase().contains(&quot;path&quot;)) {
                pathList.add(it[posPath])
            }
    }
    pathList = pathList.drop(1) // remove header name
    pathList.removeAll {!it}// remove null values
    return pathList
}

def returnPathListToDelete(List lst) {
    def listToDelete = []
    lst.each {
        def level = it.trim().tokenize(&apos;:&apos;)
        size = level.size() - 1 // last pos is always null

        if ((![&quot;home&quot;, &quot;public&quot;].contains(level[0])) &amp;&amp; size == 0) {
            listToDelete.add(level[0])
        } else if (!([&quot;admin&quot;, &quot;suzy&quot;, &quot;pat&quot;, &quot;tiffany&quot;].contains(level[1])) &amp;&amp; size &gt; 0) {
            listToDelete.add(level[0] + &quot;:&quot; + level[1])
        } else if (size &gt; 1) {
            listToDelete.add(level[0] + &quot;:&quot; + level[1] + &quot;:&quot; + level[2])
        }
    }
    return listToDelete.unique().sort()
}

def setIterateValues(List lst, String varName) {
    lst.eachWithIndex {it, index -&gt; vars.put(varName + &quot;_&quot; + (index + 1), it)} // +1 to sincronize to thread index
}</stringProp>
            <stringProp name="TestPlan.comments">Get list of atomic paths
Given variables csvFile, path, setUpData, delimiterCsv
When csvFile exist
And csvFile contains columns path, setUpData
Then Get path values where setUpData contains &quot;paths&quot;
And extract root path value
And remove duplicate and null values
And return list as iterable JMeter Variable</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Path" enabled="true">
            <stringProp name="ForeachController.inputVal">path</stringProp>
            <stringProp name="ForeachController.returnVal">path</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Delete Path: ${path}" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET properties" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiFile}/${path}/properties</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract ID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="Scope.variable">id</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Exists Delete It" enabled="true">
                <stringProp name="IfController.condition">${__groovy(
	vars.get(&quot;id&quot;) != &quot;&quot;
	)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT deletepermanent" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiFile}/deletepermanent</stringProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify StatusCode 200" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="File Management" enabled="true"/>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="File Resource" enabled="false"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Create Path" enabled="true">
            <stringProp name="IfController.condition">${__groovy(
 vars.get(&quot;setUpData&quot;)!=null &amp;&amp;
 vars.get(&quot;setUpData&quot;).toLowerCase().split(&quot;\,&quot;).toString().trim().contains(&quot;path&quot;)
)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="TestPlan.comments">  Given variables (setUpData, path, permission, user)
  When setUpData contains path
  Then
      Delete Path if exists
      Create File if path contains &quot;.&quot; dot char
      Create Directory if path dont contains &quot;.&quot; dot char
      Give user permissions
</stringProp>
          </IfController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Create Path" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete Path" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET properties" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiFile}/${path}/properties</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract ID" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">id</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                    <stringProp name="Scope.variable">id</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Exists Delete It" enabled="true">
                  <stringProp name="IfController.condition">${__groovy(
	vars.get(&quot;id&quot;) != &quot;&quot;
	)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT deletepermanent" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${id}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiFile}/deletepermanent</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify StatusCode 200" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49586">200</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">8</intProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Path" enabled="true"/>
              <hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Create File IF Path Contains &quot;.&quot; " enabled="true">
                  <stringProp name="IfController.condition">${__groovy(
	vars.get(&quot;path&quot;).contains(&quot;.&quot;)
	)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Create Files" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="764597751">Test Plan</stringProp>
                      <stringProp name="587793354">Keywords</stringProp>
                      <stringProp name="-2039322265">File Management</stringProp>
                      <stringProp name="154775090">File Resource</stringProp>
                      <stringProp name="197273171">Create Files</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Create Directory IF Path NOT Contains &quot;.&quot; " enabled="true">
                  <stringProp name="IfController.condition">${__groovy(
	! vars.get(&quot;path&quot;).contains(&quot;.&quot;)
	)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT createDir" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${apiFile}/${path}/createDir</stringProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify StatusCode 200" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49586">200</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">8</intProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Files" enabled="true"/>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Create .xml File" enabled="true">
              <stringProp name="IfController.condition">${__groovy(
  vars.get(&quot;path&quot;)!=null &amp;&amp; vars.get(&quot;path&quot;).toLowerCase().trim().contains(&quot;.xml&quot;) 
)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
              <stringProp name="TestPlan.comments">Create File if variable &quot;path&quot; have the corresponding extension</stringProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT .xml File" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&#xd;
-&lt;index&gt;&#xd;
  &lt;name&gt;%name&lt;/name&gt;&#xd;
  &lt;description&gt;%description&lt;/description&gt;&#xd;
  &lt;visible&gt;true&lt;/visible&gt;&#xd;
  &lt;display-type&gt;icons&lt;/display-type&gt;&#xd;
&lt;/index&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiFile}/${path}</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/xml</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify StatusCode 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Create .xanalyzer File" enabled="true">
              <stringProp name="IfController.condition">${__groovy(
  vars.get(&quot;path&quot;)!=null &amp;&amp; vars.get(&quot;path&quot;).toLowerCase().trim().contains(&quot;.xanalyzer&quot;) 
)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
              <stringProp name="TestPlan.comments">Create File if variable &quot;path&quot; have the corresponding extension</stringProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT .xanalyzer File" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;&#xd;
&lt;reportRecord xmlns=&quot;http://www.pentaho.com&quot;&gt;&#xd;
    &lt;commonStorageAttributes createdBy=&quot;admin&quot; updatedBy=&quot;admin&quot; created=&quot;2018-02-08T11:47:22.925-05:00&quot; update=&quot;2018-02-08T11:47:22.931-05:00&quot;&gt;&#xd;
        &lt;path name=&quot;renameTest&quot; folder=&quot;/home/admin/renameTest/renameTest.xanalyzer&quot;/&gt;&#xd;
    &lt;/commonStorageAttributes&gt;&#xd;
    &lt;report catalog=&quot;SteelWheels&quot; cube=&quot;SteelWheelsSales&quot; reportTypeEnum=&quot;PIVOT&quot; showRowGrandTotal=&quot;false&quot; showColumnGrandTotal=&quot;false&quot; useNonVisualTotals=&quot;false&quot; showEmptyEnum=&quot;SHOW_MEASURE&quot; emptyCellDisplay=&quot;-&quot; showDrillLinks=&quot;false&quot; version=&quot;11&quot; autoRefresh=&quot;true&quot; freezeColumns=&quot;true&quot; freezeRows=&quot;true&quot;&gt;&#xd;
        &lt;measures/&gt;&#xd;
        &lt;columnAttributes/&gt;&#xd;
        &lt;rowAttributes/&gt;&#xd;
        &lt;filters/&gt;&#xd;
        &lt;chartOptions vizApiVersion=&quot;2.0&quot; chartType=&quot;CUSTOM&quot; customChartType=&quot;pentaho/visual/models/bar&quot; legendPosition=&quot;RIGHT&quot; showLegend=&quot;true&quot; autoRange=&quot;true&quot; displayUnits=&quot;UNITS_0&quot; autoRangeSecondary=&quot;true&quot; displayUnitsSecondary=&quot;UNITS_0&quot; lineWidth=&quot;2&quot; lineShape=&quot;CIRCLE&quot; maxValues=&quot;100&quot; backgroundColor=&quot;#ffffff&quot; labelColor=&quot;#000000&quot; labelSize=&quot;12&quot; backgroundFill=&quot;NONE&quot; maxChartsPerRow=&quot;3&quot; backgroundColorEnd=&quot;#ffffff&quot; labelStyle=&quot;PLAIN&quot; legendBackgroundColor=&quot;#ffffff&quot; legendSize=&quot;12&quot; legendColor=&quot;#000000&quot; legendStyle=&quot;PLAIN&quot; labelFontFamily=&quot;Default&quot; legendFontFamily=&quot;Default&quot;/&gt;&#xd;
        &lt;selectionFilters/&gt;&#xd;
        &lt;selectionItems/&gt;&#xd;
        &lt;pageSetup excelPageSize=&quot;LETTER&quot; pdfPageSize=&quot;LETTER&quot; excelOrientation=&quot;LANDSCAPE&quot; pdfOrientation=&quot;LANDSCAPE&quot; excelScalingType=&quot;PERCENT&quot; excelScalingPercent=&quot;100&quot; excelScalingPageWide=&quot;1&quot; excelScalingPageTall=&quot;1&quot; csvIncludeSubtotals=&quot;true&quot; csvFormatNumbers=&quot;true&quot;/&gt;&#xd;
        &lt;drillColumns/&gt;&#xd;
    &lt;/report&gt;&#xd;
    &lt;uiAttributes showFieldList=&quot;true&quot; showFieldLayout=&quot;true&quot; showFilterPanel=&quot;false&quot; fieldListView=&quot;CMDVIEWCATEGORY&quot;&gt;&#xd;
        &lt;rowFieldWidths/&gt;&#xd;
        &lt;columnDataFieldWidths/&gt;&#xd;
        &lt;pluginData&gt;[]&lt;/pluginData&gt;&#xd;
    &lt;/uiAttributes&gt;&#xd;
&lt;/reportRecord&gt;&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiFile}/${path}</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/xml</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify StatusCode 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Create .xdash File" enabled="true">
              <stringProp name="IfController.condition">${__groovy(
  vars.get(&quot;path&quot;)!=null &amp;&amp; vars.get(&quot;path&quot;).toLowerCase().trim().contains(&quot;.xdash&quot;) 
)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
              <stringProp name="TestPlan.comments">Create File if variable &quot;path&quot; have the corresponding extension</stringProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT .xdash File" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;dashboard&gt;&#xd;
  &lt;title&gt;SuccessFailure&lt;/title&gt;&#xd;
  &lt;heading&gt;New Dashboard&lt;/heading&gt;&#xd;
  &lt;enableWidgetPrinting&gt;false&lt;/enableWidgetPrinting&gt;&#xd;
  &lt;documentation&gt;&#xd;
    &lt;author&gt;joe&lt;/author&gt;&#xd;
    &lt;description/&gt;&#xd;
    &lt;icon/&gt;&#xd;
  &lt;/documentation&gt;&#xd;
  &lt;template-ref&gt;xul/06-top-bot.xul&lt;/template-ref&gt;&#xd;
  &lt;theme-ref&gt;00-Onyx&lt;/theme-ref&gt;&#xd;
  &lt;layout&gt;&#xd;
    &lt;overlay xmlns:pho=&quot;http://www.pentaho.com&quot;&gt;&#xd;
      &lt;box id=&quot;Panel_1&quot; pho:title=&quot;Untitled 1&quot; type=&quot;titled-panel&quot; flex=&quot;1&quot; collapsed=&quot;false&quot;/&gt;&#xd;
      &lt;box id=&quot;Panel_2&quot; pho:title=&quot;Untitled 2&quot; type=&quot;titled-panel&quot; flex=&quot;1&quot; collapsed=&quot;false&quot;/&gt;&#xd;
      &lt;box id=&quot;Panel_3&quot; pho:title=&quot;Untitled 3&quot;/&gt;&#xd;
      &lt;box id=&quot;Panel_4&quot; pho:title=&quot;Untitled 4&quot;/&gt;&#xd;
      &lt;box id=&quot;Panel_5&quot; pho:title=&quot;Untitled 5&quot;/&gt;&#xd;
      &lt;box id=&quot;Panel_6&quot; pho:title=&quot;Untitled 6&quot;/&gt;&#xd;
      &lt;box id=&quot;Panel_7&quot; pho:title=&quot;Untitled 7&quot;/&gt;&#xd;
      &lt;box id=&quot;Panel_8&quot; pho:title=&quot;Untitled 8&quot;/&gt;&#xd;
      &lt;box id=&quot;Panel_9&quot; pho:title=&quot;Untitled 9&quot;/&gt;&#xd;
      &lt;box id=&quot;Panel_10&quot; pho:title=&quot;Untitled 10&quot;/&gt;&#xd;
      &lt;box id=&quot;titlebar&quot; title=&quot;&quot; height=&quot;23&quot; hidden=&quot;false&quot; width=&quot;0&quot; type=&quot;pagetitle&quot; collapsed=&quot;false&quot;/&gt;&lt;box id=&quot;widget-area&quot; type=&quot;scrollarea&quot;/&gt;&lt;box id=&quot;widget-area&quot; flex=&quot;1&quot;/&gt;&#xd;
      &lt;box id=&quot;FilterPanel&quot; title=&quot;&quot; height=&quot;100&quot; hidden=&quot;false&quot; width=&quot;0&quot; type=&quot;povpanel&quot; collapsed=&quot;false&quot;&gt;&#xd;
        &lt;hbox id=&quot;FilterPanel content&quot; height=&quot;0&quot; width=&quot;0&quot; type=&quot;&quot;&gt;&#xd;
          &lt;vbox id=&quot;pov_widget_1_container&quot; height=&quot;0&quot; width=&quot;0&quot; label=&quot;[object Object]&quot; type=&quot;&quot;&gt;&lt;label id=&quot;pov_widget_1_label&quot; value=&quot;Start date&quot; hidden=&quot;false&quot;/&gt;&lt;box pho:type=&quot;pov&quot; id=&quot;pov_widget_1&quot;/&gt;&lt;/vbox&gt;&#xd;
          &lt;vbox id=&quot;pov_widget_2_container&quot; height=&quot;0&quot; width=&quot;0&quot; label=&quot;[object Object]&quot; type=&quot;&quot;&gt;&lt;label id=&quot;pov_widget_2_label&quot; value=&quot;Period&quot; hidden=&quot;false&quot;/&gt;&lt;box pho:type=&quot;pov&quot; id=&quot;pov_widget_2&quot;/&gt;&lt;/vbox&gt;&#xd;
        &lt;/hbox&gt;&#xd;
      &lt;/box&gt;&lt;box id=&quot;hbox1&quot; type=&quot;layout&quot;/&gt;&lt;box id=&quot;hbox1&quot; flex=&quot;1&quot;/&gt;&lt;box id=&quot;hbox2&quot; type=&quot;layout&quot;/&gt;&lt;box id=&quot;hbox2&quot; flex=&quot;1&quot;/&gt;&lt;box id=&quot;widget-area&quot; type=&quot;scrollarea&quot;/&gt;&lt;box id=&quot;widget-area&quot; flex=&quot;1&quot;/&gt;&lt;box id=&quot;hbox1&quot; type=&quot;layout&quot;/&gt;&lt;box id=&quot;hbox1&quot; flex=&quot;1&quot;/&gt;&lt;box id=&quot;hbox2&quot; type=&quot;layout&quot;/&gt;&lt;box id=&quot;hbox2&quot; flex=&quot;1&quot;/&gt;&lt;box id=&quot;widget-area&quot; type=&quot;scrollarea&quot;/&gt;&lt;box id=&quot;widget-area&quot; flex=&quot;1&quot;/&gt;&lt;box id=&quot;pov_widget_1&quot; title=&quot;&quot; height=&quot;0&quot; width=&quot;0&quot; type=&quot;pov&quot; collapsed=&quot;false&quot;/&gt;&lt;box id=&quot;hbox1&quot; type=&quot;layout&quot;/&gt;&lt;box id=&quot;hbox1&quot; flex=&quot;1&quot;/&gt;&lt;box id=&quot;hbox2&quot; type=&quot;layout&quot;/&gt;&lt;box id=&quot;hbox2&quot; flex=&quot;1&quot;/&gt;&lt;box id=&quot;widget-area&quot; type=&quot;scrollarea&quot;/&gt;&lt;box id=&quot;widget-area&quot; flex=&quot;1&quot;/&gt;&lt;box id=&quot;pov_widget_2&quot; title=&quot;&quot; height=&quot;0&quot; width=&quot;0&quot; type=&quot;pov&quot; collapsed=&quot;false&quot;/&gt;&lt;box id=&quot;hbox1&quot; type=&quot;layout&quot;/&gt;&lt;box id=&quot;hbox1&quot; flex=&quot;1&quot;/&gt;&lt;box id=&quot;hbox2&quot; type=&quot;layout&quot;/&gt;&lt;box id=&quot;hbox2&quot; flex=&quot;1&quot;/&gt;&lt;box id=&quot;widget-area&quot; type=&quot;scrollarea&quot;/&gt;&lt;box id=&quot;widget-area&quot; flex=&quot;1&quot;/&gt;&lt;box id=&quot;hbox1&quot; type=&quot;layout&quot;/&gt;&lt;box id=&quot;hbox1&quot; flex=&quot;1&quot;/&gt;&lt;box id=&quot;hbox2&quot; type=&quot;layout&quot;/&gt;&lt;box id=&quot;hbox2&quot; flex=&quot;1&quot;/&gt;&lt;box id=&quot;widget-area&quot; type=&quot;scrollarea&quot;/&gt;&lt;box id=&quot;widget-area&quot; flex=&quot;1&quot;/&gt;&lt;box id=&quot;hbox1&quot; type=&quot;layout&quot;/&gt;&lt;box id=&quot;hbox1&quot; flex=&quot;1&quot;/&gt;&lt;box id=&quot;hbox2&quot; type=&quot;layout&quot;/&gt;&lt;box id=&quot;hbox2&quot; flex=&quot;1&quot;/&gt;&lt;box id=&quot;widget-area&quot; type=&quot;scrollarea&quot;/&gt;&lt;box id=&quot;widget-area&quot; flex=&quot;1&quot;/&gt;&lt;box id=&quot;hbox1&quot; type=&quot;layout&quot;/&gt;&lt;box id=&quot;hbox1&quot; flex=&quot;1&quot;/&gt;&lt;box id=&quot;hbox2&quot; type=&quot;layout&quot;/&gt;&lt;box id=&quot;hbox2&quot; flex=&quot;1&quot;/&gt;&lt;box id=&quot;widget-area&quot; type=&quot;scrollarea&quot;/&gt;&lt;box id=&quot;widget-area&quot; flex=&quot;1&quot;/&gt;&lt;box id=&quot;hbox1&quot; type=&quot;layout&quot;/&gt;&lt;box id=&quot;hbox1&quot; flex=&quot;1&quot;/&gt;&lt;box id=&quot;hbox2&quot; type=&quot;layout&quot;/&gt;&lt;box id=&quot;hbox2&quot; flex=&quot;1&quot;/&gt;&lt;box id=&quot;widget-area&quot; type=&quot;scrollarea&quot;/&gt;&lt;box id=&quot;widget-area&quot; flex=&quot;1&quot;/&gt;&lt;box id=&quot;hbox1&quot; type=&quot;layout&quot;/&gt;&lt;box id=&quot;hbox1&quot; flex=&quot;1&quot;/&gt;&lt;box id=&quot;hbox2&quot; type=&quot;layout&quot;/&gt;&lt;box id=&quot;hbox2&quot; flex=&quot;1&quot;/&gt;&lt;box id=&quot;widget-area&quot; type=&quot;scrollarea&quot;/&gt;&lt;box id=&quot;widget-area&quot; flex=&quot;1&quot;/&gt;&lt;box id=&quot;hbox1&quot; type=&quot;layout&quot;/&gt;&lt;box id=&quot;hbox1&quot; flex=&quot;1&quot;/&gt;&lt;box id=&quot;hbox2&quot; type=&quot;layout&quot;/&gt;&lt;box id=&quot;hbox2&quot; flex=&quot;1&quot;/&gt;&lt;box id=&quot;widget-area&quot; type=&quot;scrollarea&quot;/&gt;&lt;box id=&quot;widget-area&quot; flex=&quot;1&quot;/&gt;&lt;box id=&quot;hbox1&quot; type=&quot;layout&quot;/&gt;&lt;box id=&quot;hbox1&quot; flex=&quot;1&quot;/&gt;&lt;box id=&quot;hbox2&quot; type=&quot;layout&quot;/&gt;&lt;box id=&quot;hbox2&quot; flex=&quot;1&quot;/&gt;&lt;box id=&quot;widget-area&quot; flex=&quot;1&quot;/&gt;&lt;box id=&quot;widget-area&quot; type=&quot;scrollarea&quot;/&gt;&lt;box id=&quot;hbox1&quot; flex=&quot;1&quot;/&gt;&lt;box id=&quot;hbox1&quot; type=&quot;layout&quot;/&gt;&lt;box id=&quot;hbox2&quot; flex=&quot;1&quot;/&gt;&lt;box id=&quot;hbox2&quot; type=&quot;layout&quot;/&gt;&lt;/overlay&gt;&#xd;
  &lt;/layout&gt;&#xd;
  &lt;parameters&gt;&#xd;
    &lt;parameter&gt;&#xd;
      &lt;name&gt;Start date1342101273954&lt;/name&gt;&#xd;
      &lt;defaultValue&gt;null&lt;/defaultValue&gt;&#xd;
    &lt;/parameter&gt;&#xd;
    &lt;parameter&gt;&#xd;
      &lt;name&gt;Period1342101325496&lt;/name&gt;&#xd;
      &lt;defaultValue/&gt;&#xd;
    &lt;/parameter&gt;&#xd;
    &lt;parameter&gt;&#xd;
      &lt;name&gt;Start date1342101273954&lt;/name&gt;&#xd;
      &lt;defaultValue&gt;null&lt;/defaultValue&gt;&#xd;
    &lt;/parameter&gt;&#xd;
    &lt;parameter&gt;&#xd;
      &lt;name&gt;Start date1342101273954&lt;/name&gt;&#xd;
      &lt;defaultValue&gt;null&lt;/defaultValue&gt;&#xd;
    &lt;/parameter&gt;&#xd;
  &lt;/parameters&gt;&#xd;
&#xd;
  &lt;widgetJavascript&gt;&#xd;
    &lt;![CDATA[%5B%7B%22timerStart%22%3A%222017-01-10T18%3A03%3A47.439Z%22%2C%22refreshPeriod%22%3A0%2C%22timerSplit%22%3A%222017-01-10T18%3A03%3A47.449Z%22%2C%22type%22%3A%22PentahoPrptComponent%22%2C%22elapsedSinceSplit%22%3A4%2C%22autoSubmit%22%3Atrue%2C%22path%22%3A%22public%2Fpentaho-operations-mart%2Fdi_server%22%2C%22iconImgSrc%22%3A%22..%2F..%2F..%2F..%2F..%2Frepos%2Freporting%2Freportviewer%2Fimages%2FprptFileType.png%22%2C%22isDirty%22%3Afalse%2C%22solution%22%3A%22%22%2C%22options%22%3A%7B%22showParameters%22%3A%22false%22%7D%2C%22action%22%3A%22Successful_vs_Failed.prpt%22%2C%22paramExtraInfo%22%3A%5B%5D%2C%22iframe%22%3Atrue%2C%22outputParameters%22%3A%5B%5D%2C%22xactionPath%22%3A%22%2Fpublic%2Fpentaho-operations-mart%2Fdi_server%2FSuccessful_vs_Failed.prpt%22%2C%22localizedName%22%3A%22Successful_vs_Failed%22%2C%22visible%22%3Atrue%2C%22GUID%22%3A%2270455%22%2C%22elapsedSinceStart%22%3A10%2C%22staticParameters%22%3Atrue%2C%22priority%22%3A%22-1000%22%2C%22isManaged%22%3Atrue%2C%22executeAtStart%22%3Atrue%2C%22paramServiceUrl%22%3A%22%2Fpentaho%2Fapi%2Frepos%2F%253Apublic%253APentaho%2520Operations%2520Mart%253Adi_server%253ASuccessful_vs_Failed.prpt%2Fparameter%3Fframeless%3Dtrue%26showParameters%3Dfalse%26renderMode%3DPARAMETER%22%2C%22htmlObject%22%3A%22content-area-Panel_1%22%2C%22name%22%3A%22widget1%22%2C%22parameters%22%3A%5B%5B%22start_date%22%2C%22Start%20date1342101273954%22%2C%222014-06-13T00%3A00%3A00.000%2B0300%22%5D%2C%5B%22period_selection%22%2C%22Period1342101325496%22%2C%221%22%5D%2C%5B%22output-target%22%2C%22%22%2C%22table%2Fhtml%3Bpage-mode%3Dpage%22%5D%5D%2C%22initInstance%22%3A0%2C%22logColor%22%3A%22rgb(85%2C184%2C83)%22%2C%22listeners%22%3A%5B%22Start%20date1342101273954%22%2C%22Period1342101325496%22%5D%7D%2C%7B%22timerStart%22%3A%222017-01-10T18%3A03%3A47.447Z%22%2C%22refreshPeriod%22%3A0%2C%22timerSplit%22%3A%222017-01-10T18%3A03%3A47.466Z%22%2C%22type%22%3A%22PentahoPrptComponent%22%2C%22elapsedSinceSplit%22%3A2%2C%22autoSubmit%22%3Atrue%2C%22path%22%3A%22public%2Fpentaho-operations-mart%2Fdi_server%22%2C%22iconImgSrc%22%3A%22..%2F..%2F..%2F..%2F..%2Frepos%2Freporting%2Freportviewer%2Fimages%2FprptFileType.png%22%2C%22isDirty%22%3Afalse%2C%22solution%22%3A%22%22%2C%22options%22%3A%7B%22showParameters%22%3A%22false%22%7D%2C%22action%22%3A%22Success_vs_Failure_Rate.prpt%22%2C%22paramExtraInfo%22%3A%5B%5D%2C%22iframe%22%3Atrue%2C%22outputParameters%22%3A%5B%5D%2C%22xactionPath%22%3A%22%2Fpublic%2Fpentaho-operations-mart%2Fdi_server%2FSuccess_vs_Failure_Rate.prpt%22%2C%22localizedName%22%3A%22Success_vs_Failure_Rate%22%2C%22visible%22%3Atrue%2C%22GUID%22%3A%2225952%22%2C%22elapsedSinceStart%22%3A19%2C%22staticParameters%22%3Atrue%2C%22priority%22%3A%22-999%22%2C%22isManaged%22%3Atrue%2C%22executeAtStart%22%3Atrue%2C%22paramServiceUrl%22%3A%22%2Fpentaho%2Fapi%2Frepos%2F%253Apublic%253APentaho%2520Operations%2520Mart%253Adi_server%253ASuccess_vs_Failure_Rate.prpt%2Fparameter%3Fframeless%3Dtrue%26showParameters%3Dfalse%26renderMode%3DPARAMETER%22%2C%22htmlObject%22%3A%22content-area-Panel_2%22%2C%22name%22%3A%22widget2%22%2C%22parameters%22%3A%5B%5B%22start_date%22%2C%22Start%20date1342101273954%22%2C%222014-06-13T00%3A00%3A00.000%2B0300%22%5D%2C%5B%22period_selection%22%2C%22Period1342101325496%22%2C%221%22%5D%2C%5B%22output-target%22%2C%22%22%2C%22table%2Fhtml%3Bpage-mode%3Dpage%22%5D%5D%2C%22initInstance%22%3A0%2C%22logColor%22%3A%22rgb(84%2C184%2C82)%22%2C%22listeners%22%3A%5B%22Start%20date1342101273954%22%2C%22Period1342101325496%22%5D%7D%2C%7B%22type%22%3A%22dateInputComponent%22%2C%22name%22%3A%22pov_widget_1%22%2C%22parameter%22%3A%22Start%20date1342101273954%22%2C%22htmlObject%22%3A%22widgetContainer-content-pov_widget_1%22%2C%22valueAsId%22%3Afalse%2C%22executeAtStart%22%3Atrue%2C%22defaultIfEmpty%22%3Atrue%2C%22verticalOrientation%22%3Atrue%2C%22separator%22%3Anull%2C%22title%22%3A%22Start%20date%22%2C%22useFirstValue%22%3Afalse%2C%22dateFormat%22%3A%22yyyy-MM-dd%22%2C%22filterType%22%3A%22static%22%2C%22parameters%22%3A%5B%5D%2C%22valuesArray%22%3A%5B%5D%2C%22defaultValue%22%3A%22null%22%2C%22GUID%22%3A%2238939%22%7D%2C%7B%22timerStart%22%3A%222017-01-10T18%3A03%3A11.404Z%22%2C%22logColor%22%3A%22rgb(149%2C127%2C159)%22%2C%22defaultValue%22%3A%22null%22%2C%22refreshPeriod%22%3A0%2C%22timerSplit%22%3A%222017-01-10T18%3A03%3A11.460Z%22%2C%22type%22%3A%22multiButtonComponent%22%2C%22title%22%3A%22Period%22%2C%22elapsedSinceSplit%22%3A55%2C%22isRunning%22%3Afalse%2C%22useFirstValue%22%3Atrue%2C%22parameter%22%3A%22Period1342101325496%22%2C%22defaultIfEmpty%22%3Atrue%2C%22visible%22%3Atrue%2C%22GUID%22%3A%2257795%22%2C%22elapsedSinceStart%22%3A56%2C%22isMultiple%22%3Afalse%2C%22priority%22%3A%22-997%22%2C%22separator%22%3A%22null%22%2C%22valueAsId%22%3Afalse%2C%22cachedArray%22%3A%5B%5B%221%22%2C%2224%20hours%22%5D%2C%5B%227%22%2C%227%20days%22%5D%2C%5B%2230%22%2C%2230%20days%22%5D%5D%2C%22isManaged%22%3Afalse%2C%22initInstance%22%3A%220%22%2C%22executeAtStart%22%3Atrue%2C%22htmlObject%22%3A%22widgetContainer-content-pov_widget_2%22%2C%22valuesArray%22%3A%5B%5B%221%22%2C%2224%20hours%22%5D%2C%5B%227%22%2C%227%20days%22%5D%2C%5B%2230%22%2C%2230%20days%22%5D%5D%2C%22verticalOrientation%22%3Atrue%2C%22name%22%3A%22pov_widget_2%22%2C%22filterType%22%3A%22static%22%2C%22runCounter%22%3A%220%22%2C%22parameters%22%3A%5B%5D%7D%5D]]&gt;&#xd;
  &lt;/widgetJavascript&gt;&#xd;
  &lt;widgets&gt;&#xd;
    &lt;widget jsonType=&quot;object&quot;&gt;&#xd;
      &lt;timerStart jsonType=&quot;string&quot;&gt;2017-01-10T18:03:47.439Z&lt;/timerStart&gt;&#xd;
      &lt;logColor jsonType=&quot;string&quot;&gt;rgb(85,184,83)&lt;/logColor&gt;&#xd;
      &lt;refreshPeriod jsonType=&quot;string&quot;&gt;0&lt;/refreshPeriod&gt;&#xd;
      &lt;timerSplit jsonType=&quot;string&quot;&gt;2017-01-10T18:03:47.449Z&lt;/timerSplit&gt;&#xd;
      &lt;type jsonType=&quot;string&quot;&gt;PentahoPrptComponent&lt;/type&gt;&#xd;
      &lt;elapsedSinceSplit jsonType=&quot;string&quot;&gt;4&lt;/elapsedSinceSplit&gt;&#xd;
      &lt;autoSubmit jsonType=&quot;string&quot;&gt;true&lt;/autoSubmit&gt;&#xd;
      &lt;path jsonType=&quot;string&quot;&gt;public/pentaho-operations-mart/di_server&lt;/path&gt;&#xd;
      &lt;iconImgSrc jsonType=&quot;string&quot;&gt;../../../../../repos/reporting/reportviewer/images/prptFileType.png&lt;/iconImgSrc&gt;&#xd;
      &lt;isDirty jsonType=&quot;string&quot;&gt;false&lt;/isDirty&gt;&lt;solution jsonType=&quot;string&quot;/&gt;&#xd;
      &lt;options jsonType=&quot;object&quot;&gt;&#xd;
        &lt;showParameters jsonType=&quot;string&quot;&gt;false&lt;/showParameters&gt;&#xd;
      &lt;/options&gt;&#xd;
      &lt;action jsonType=&quot;string&quot;&gt;Successful_vs_Failed.prpt&lt;/action&gt;&#xd;
      &lt;iframe jsonType=&quot;string&quot;&gt;true&lt;/iframe&gt;&lt;outputParameters jsonType=&quot;object&quot;/&gt;&#xd;
      &lt;xactionPath jsonType=&quot;string&quot;&gt;/public/pentaho-operations-mart/di_server/Successful_vs_Failed.prpt&lt;/xactionPath&gt;&#xd;
      &lt;localizedName jsonType=&quot;string&quot;&gt;Successful_vs_Failed&lt;/localizedName&gt;&#xd;
      &lt;visible jsonType=&quot;string&quot;&gt;true&lt;/visible&gt;&#xd;
      &lt;listeners jsonType=&quot;string&quot; jsonIsArray=&quot;true&quot;&gt;Start date1342101273954&lt;/listeners&gt;&#xd;
      &lt;listeners jsonType=&quot;string&quot; jsonIsArray=&quot;true&quot;&gt;Period1342101325496&lt;/listeners&gt;&#xd;
      &lt;GUID jsonType=&quot;string&quot;&gt;70455&lt;/GUID&gt;&#xd;
      &lt;elapsedSinceStart jsonType=&quot;string&quot;&gt;10&lt;/elapsedSinceStart&gt;&#xd;
      &lt;staticParameters jsonType=&quot;string&quot;&gt;true&lt;/staticParameters&gt;&#xd;
      &lt;priority jsonType=&quot;string&quot;&gt;-1000&lt;/priority&gt;&#xd;
      &lt;isManaged jsonType=&quot;string&quot;&gt;true&lt;/isManaged&gt;&#xd;
      &lt;executeAtStart jsonType=&quot;string&quot;&gt;true&lt;/executeAtStart&gt;&#xd;
      &lt;initInstance jsonType=&quot;string&quot;&gt;0&lt;/initInstance&gt;&#xd;
      &lt;paramServiceUrl jsonType=&quot;string&quot;&gt;/pentaho/api/repos/%3Apublic%3APentaho%20Operations%20Mart%3Adi_server%3ASuccessful_vs_Failed.prpt/parameter?frameless=true&amp;amp;showParameters=false&amp;amp;renderMode=PARAMETER&lt;/paramServiceUrl&gt;&#xd;
      &lt;htmlObject jsonType=&quot;string&quot;&gt;content-area-Panel_1&lt;/htmlObject&gt;&#xd;
      &lt;name jsonType=&quot;string&quot;&gt;widget1&lt;/name&gt;&#xd;
      &lt;parameters jsonType=&quot;object&quot;&gt;&#xd;
        &lt;parameter0 jsonType=&quot;object&quot;&gt;&#xd;
          &lt;const jsonType=&quot;string&quot;&gt;2017-01-06&lt;/const&gt;&#xd;
          &lt;var jsonType=&quot;string&quot;&gt;Start date1342101273954&lt;/var&gt;&#xd;
          &lt;name jsonType=&quot;string&quot;&gt;start_date&lt;/name&gt;&#xd;
        &lt;/parameter0&gt;&#xd;
        &lt;parameter2 jsonType=&quot;object&quot;&gt;&#xd;
          &lt;const jsonType=&quot;string&quot;&gt;table/html;page-mode=page&lt;/const&gt;&lt;var jsonType=&quot;string&quot;/&gt;&#xd;
          &lt;name jsonType=&quot;string&quot;&gt;output-target&lt;/name&gt;&#xd;
        &lt;/parameter2&gt;&#xd;
        &lt;parameter1 jsonType=&quot;object&quot;&gt;&#xd;
          &lt;const jsonType=&quot;string&quot;&gt;1&lt;/const&gt;&#xd;
          &lt;var jsonType=&quot;string&quot;&gt;Period1342101325496&lt;/var&gt;&#xd;
          &lt;name jsonType=&quot;string&quot;&gt;period_selection&lt;/name&gt;&#xd;
        &lt;/parameter1&gt;&#xd;
      &lt;/parameters&gt;&#xd;
    &lt;/widget&gt;&#xd;
    &lt;widget jsonType=&quot;object&quot;&gt;&#xd;
      &lt;timerStart jsonType=&quot;string&quot;&gt;2017-01-10T18:03:47.447Z&lt;/timerStart&gt;&#xd;
      &lt;logColor jsonType=&quot;string&quot;&gt;rgb(84,184,82)&lt;/logColor&gt;&#xd;
      &lt;refreshPeriod jsonType=&quot;string&quot;&gt;0&lt;/refreshPeriod&gt;&#xd;
      &lt;timerSplit jsonType=&quot;string&quot;&gt;2017-01-10T18:03:47.466Z&lt;/timerSplit&gt;&#xd;
      &lt;type jsonType=&quot;string&quot;&gt;PentahoPrptComponent&lt;/type&gt;&#xd;
      &lt;elapsedSinceSplit jsonType=&quot;string&quot;&gt;2&lt;/elapsedSinceSplit&gt;&#xd;
      &lt;autoSubmit jsonType=&quot;string&quot;&gt;true&lt;/autoSubmit&gt;&#xd;
      &lt;path jsonType=&quot;string&quot;&gt;public/pentaho-operations-mart/di_server&lt;/path&gt;&#xd;
      &lt;iconImgSrc jsonType=&quot;string&quot;&gt;../../../../../repos/reporting/reportviewer/images/prptFileType.png&lt;/iconImgSrc&gt;&#xd;
      &lt;isDirty jsonType=&quot;string&quot;&gt;false&lt;/isDirty&gt;&lt;solution jsonType=&quot;string&quot;/&gt;&#xd;
      &lt;options jsonType=&quot;object&quot;&gt;&#xd;
        &lt;showParameters jsonType=&quot;string&quot;&gt;false&lt;/showParameters&gt;&#xd;
      &lt;/options&gt;&#xd;
      &lt;action jsonType=&quot;string&quot;&gt;Success_vs_Failure_Rate.prpt&lt;/action&gt;&#xd;
      &lt;iframe jsonType=&quot;string&quot;&gt;true&lt;/iframe&gt;&lt;outputParameters jsonType=&quot;object&quot;/&gt;&#xd;
      &lt;xactionPath jsonType=&quot;string&quot;&gt;/public/pentaho-operations-mart/di_server/Success_vs_Failure_Rate.prpt&lt;/xactionPath&gt;&#xd;
      &lt;localizedName jsonType=&quot;string&quot;&gt;Success_vs_Failure_Rate&lt;/localizedName&gt;&#xd;
      &lt;visible jsonType=&quot;string&quot;&gt;true&lt;/visible&gt;&#xd;
      &lt;listeners jsonType=&quot;string&quot; jsonIsArray=&quot;true&quot;&gt;Start date1342101273954&lt;/listeners&gt;&#xd;
      &lt;listeners jsonType=&quot;string&quot; jsonIsArray=&quot;true&quot;&gt;Period1342101325496&lt;/listeners&gt;&#xd;
      &lt;GUID jsonType=&quot;string&quot;&gt;25952&lt;/GUID&gt;&#xd;
      &lt;elapsedSinceStart jsonType=&quot;string&quot;&gt;19&lt;/elapsedSinceStart&gt;&#xd;
      &lt;staticParameters jsonType=&quot;string&quot;&gt;true&lt;/staticParameters&gt;&#xd;
      &lt;priority jsonType=&quot;string&quot;&gt;-999&lt;/priority&gt;&#xd;
      &lt;isManaged jsonType=&quot;string&quot;&gt;true&lt;/isManaged&gt;&#xd;
      &lt;executeAtStart jsonType=&quot;string&quot;&gt;true&lt;/executeAtStart&gt;&#xd;
      &lt;initInstance jsonType=&quot;string&quot;&gt;0&lt;/initInstance&gt;&#xd;
      &lt;paramServiceUrl jsonType=&quot;string&quot;&gt;/pentaho/api/repos/%3Apublic%3APentaho%20Operations%20Mart%3Adi_server%3ASuccess_vs_Failure_Rate.prpt/parameter?frameless=true&amp;amp;showParameters=false&amp;amp;renderMode=PARAMETER&lt;/paramServiceUrl&gt;&#xd;
      &lt;htmlObject jsonType=&quot;string&quot;&gt;content-area-Panel_2&lt;/htmlObject&gt;&#xd;
      &lt;name jsonType=&quot;string&quot;&gt;widget2&lt;/name&gt;&#xd;
      &lt;parameters jsonType=&quot;object&quot;&gt;&#xd;
        &lt;parameter0 jsonType=&quot;object&quot;&gt;&#xd;
          &lt;const jsonType=&quot;string&quot;&gt;2017-01-06&lt;/const&gt;&#xd;
          &lt;var jsonType=&quot;string&quot;&gt;Start date1342101273954&lt;/var&gt;&#xd;
          &lt;name jsonType=&quot;string&quot;&gt;start_date&lt;/name&gt;&#xd;
        &lt;/parameter0&gt;&#xd;
        &lt;parameter2 jsonType=&quot;object&quot;&gt;&#xd;
          &lt;const jsonType=&quot;string&quot;&gt;table/html;page-mode=page&lt;/const&gt;&lt;var jsonType=&quot;string&quot;/&gt;&#xd;
          &lt;name jsonType=&quot;string&quot;&gt;output-target&lt;/name&gt;&#xd;
        &lt;/parameter2&gt;&#xd;
        &lt;parameter1 jsonType=&quot;object&quot;&gt;&#xd;
          &lt;const jsonType=&quot;string&quot;&gt;1&lt;/const&gt;&#xd;
          &lt;var jsonType=&quot;string&quot;&gt;Period1342101325496&lt;/var&gt;&#xd;
          &lt;name jsonType=&quot;string&quot;&gt;period_selection&lt;/name&gt;&#xd;
        &lt;/parameter1&gt;&#xd;
      &lt;/parameters&gt;&#xd;
    &lt;/widget&gt;&#xd;
    &lt;widget jsonType=&quot;object&quot;&gt;&#xd;
      &lt;dateFormat jsonType=&quot;string&quot;&gt;yyyy-MM-dd&lt;/dateFormat&gt;&#xd;
      &lt;defaultValue jsonType=&quot;string&quot;&gt;null&lt;/defaultValue&gt;&#xd;
      &lt;GUID jsonType=&quot;string&quot;&gt;38939&lt;/GUID&gt;&#xd;
      &lt;type jsonType=&quot;string&quot;&gt;dateInputComponent&lt;/type&gt;&#xd;
      &lt;title jsonType=&quot;string&quot;&gt;Start date&lt;/title&gt;&#xd;
      &lt;valueAsId jsonType=&quot;string&quot;&gt;false&lt;/valueAsId&gt;&lt;separator isNull=&quot;true&quot;/&gt;&#xd;
      &lt;executeAtStart jsonType=&quot;string&quot;&gt;true&lt;/executeAtStart&gt;&#xd;
      &lt;htmlObject jsonType=&quot;string&quot;&gt;widgetContainer-content-pov_widget_1&lt;/htmlObject&gt;&#xd;
      &lt;verticalOrientation jsonType=&quot;string&quot;&gt;true&lt;/verticalOrientation&gt;&#xd;
      &lt;useFirstValue jsonType=&quot;string&quot;&gt;false&lt;/useFirstValue&gt;&#xd;
      &lt;parameter jsonType=&quot;string&quot;&gt;Start date1342101273954&lt;/parameter&gt;&#xd;
      &lt;name jsonType=&quot;string&quot;&gt;pov_widget_1&lt;/name&gt;&#xd;
      &lt;filterType jsonType=&quot;string&quot;&gt;static&lt;/filterType&gt;&lt;parameters jsonType=&quot;object&quot;/&gt;&#xd;
      &lt;defaultIfEmpty jsonType=&quot;string&quot;&gt;true&lt;/defaultIfEmpty&gt;&#xd;
    &lt;/widget&gt;&#xd;
    &lt;widget jsonType=&quot;object&quot;&gt;&#xd;
      &lt;timerStart jsonType=&quot;string&quot;&gt;2017-01-10T18:03:11.404Z&lt;/timerStart&gt;&#xd;
      &lt;logColor jsonType=&quot;string&quot;&gt;rgb(149,127,159)&lt;/logColor&gt;&#xd;
      &lt;defaultValue jsonType=&quot;string&quot;&gt;null&lt;/defaultValue&gt;&#xd;
      &lt;refreshPeriod jsonType=&quot;string&quot;&gt;0&lt;/refreshPeriod&gt;&#xd;
      &lt;timerSplit jsonType=&quot;string&quot;&gt;2017-01-10T18:03:11.460Z&lt;/timerSplit&gt;&#xd;
      &lt;type jsonType=&quot;string&quot;&gt;multiButtonComponent&lt;/type&gt;&#xd;
      &lt;title jsonType=&quot;string&quot;&gt;Period&lt;/title&gt;&#xd;
      &lt;elapsedSinceSplit jsonType=&quot;string&quot;&gt;55&lt;/elapsedSinceSplit&gt;&#xd;
      &lt;isRunning jsonType=&quot;string&quot;&gt;false&lt;/isRunning&gt;&#xd;
      &lt;useFirstValue jsonType=&quot;string&quot;&gt;true&lt;/useFirstValue&gt;&#xd;
      &lt;parameter jsonType=&quot;string&quot;&gt;Period1342101325496&lt;/parameter&gt;&#xd;
      &lt;defaultIfEmpty jsonType=&quot;string&quot;&gt;true&lt;/defaultIfEmpty&gt;&#xd;
      &lt;visible jsonType=&quot;string&quot;&gt;true&lt;/visible&gt;&#xd;
      &lt;GUID jsonType=&quot;string&quot;&gt;57795&lt;/GUID&gt;&#xd;
      &lt;elapsedSinceStart jsonType=&quot;string&quot;&gt;56&lt;/elapsedSinceStart&gt;&#xd;
      &lt;isMultiple jsonType=&quot;string&quot;&gt;false&lt;/isMultiple&gt;&#xd;
      &lt;priority jsonType=&quot;string&quot;&gt;-997&lt;/priority&gt;&#xd;
      &lt;separator jsonType=&quot;string&quot;&gt;null&lt;/separator&gt;&#xd;
      &lt;valueAsId jsonType=&quot;string&quot;&gt;false&lt;/valueAsId&gt;&#xd;
      &lt;cachedArray jsonType=&quot;string&quot; jsonIsArray=&quot;true&quot;&gt;1&lt;/cachedArray&gt;&#xd;
      &lt;cachedArray jsonType=&quot;string&quot; jsonIsArray=&quot;true&quot;&gt;24 hours&lt;/cachedArray&gt;&#xd;
      &lt;cachedArray jsonType=&quot;string&quot; jsonIsArray=&quot;true&quot;&gt;7&lt;/cachedArray&gt;&#xd;
      &lt;cachedArray jsonType=&quot;string&quot; jsonIsArray=&quot;true&quot;&gt;7 days&lt;/cachedArray&gt;&#xd;
      &lt;cachedArray jsonType=&quot;string&quot; jsonIsArray=&quot;true&quot;&gt;30&lt;/cachedArray&gt;&#xd;
      &lt;cachedArray jsonType=&quot;string&quot; jsonIsArray=&quot;true&quot;&gt;30 days&lt;/cachedArray&gt;&#xd;
      &lt;isManaged jsonType=&quot;string&quot;&gt;false&lt;/isManaged&gt;&#xd;
      &lt;initInstance jsonType=&quot;string&quot;&gt;0&lt;/initInstance&gt;&#xd;
      &lt;executeAtStart jsonType=&quot;string&quot;&gt;true&lt;/executeAtStart&gt;&#xd;
      &lt;htmlObject jsonType=&quot;string&quot;&gt;widgetContainer-content-pov_widget_2&lt;/htmlObject&gt;&#xd;
      &lt;valuesArray jsonType=&quot;string&quot; jsonIsArray=&quot;true&quot;&gt;1&lt;/valuesArray&gt;&#xd;
      &lt;valuesArray jsonType=&quot;string&quot; jsonIsArray=&quot;true&quot;&gt;24 hours&lt;/valuesArray&gt;&#xd;
      &lt;valuesArray jsonType=&quot;string&quot; jsonIsArray=&quot;true&quot;&gt;7&lt;/valuesArray&gt;&#xd;
      &lt;valuesArray jsonType=&quot;string&quot; jsonIsArray=&quot;true&quot;&gt;7 days&lt;/valuesArray&gt;&#xd;
      &lt;valuesArray jsonType=&quot;string&quot; jsonIsArray=&quot;true&quot;&gt;30&lt;/valuesArray&gt;&#xd;
      &lt;valuesArray jsonType=&quot;string&quot; jsonIsArray=&quot;true&quot;&gt;30 days&lt;/valuesArray&gt;&#xd;
      &lt;verticalOrientation jsonType=&quot;string&quot;&gt;true&lt;/verticalOrientation&gt;&#xd;
      &lt;name jsonType=&quot;string&quot;&gt;pov_widget_2&lt;/name&gt;&#xd;
      &lt;filterType jsonType=&quot;string&quot;&gt;static&lt;/filterType&gt;&#xd;
      &lt;runCounter jsonType=&quot;string&quot;&gt;0&lt;/runCounter&gt;&lt;parameters jsonType=&quot;object&quot;/&gt;&lt;/widget&gt;&#xd;
  &lt;/widgets&gt;&#xd;
&lt;/dashboard&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiFile}/${path}</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/xml</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify StatusCode 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Create .prpti File" enabled="true">
              <stringProp name="IfController.condition">${__groovy(
  vars.get(&quot;path&quot;)!=null &amp;&amp; vars.get(&quot;path&quot;).toLowerCase().trim().contains(&quot;.prpti&quot;) 
)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
              <stringProp name="TestPlan.comments">Create File if variable &quot;path&quot; have the corresponding extension</stringProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT .prpt  File" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;class&quot;: &quot;com.pentaho.iadhoc.model.ThinSpecification&quot;,&#xd;
  &quot;columnFooter&quot;: null,&#xd;
  &quot;columnHeader&quot;: null,&#xd;
  &quot;dataSources&quot;: [{&#xd;
    &quot;class&quot;: &quot;com.pentaho.iadhoc.model.ThinStaticDataSource&quot;,&#xd;
    &quot;columnNames&quot;: [&quot;placeholder&quot;],&#xd;
    &quot;name&quot;: &quot;default-empty&quot;,&#xd;
    &quot;values&quot;: [&#xd;
      [null],&#xd;
      [null],&#xd;
      [null],&#xd;
      [null],&#xd;
      [null],&#xd;
      [null],&#xd;
      [null],&#xd;
      [null],&#xd;
      [null],&#xd;
      [null]&#xd;
    ],&#xd;
    &quot;query&quot;: &quot;undefined&quot;,&#xd;
    &quot;domainId&quot;: &quot;undefined&quot;,&#xd;
    &quot;xmi&quot;: &quot;undefined&quot;&#xd;
  }, {&#xd;
    &quot;class&quot;: &quot;com.pentaho.iadhoc.model.ThinPmdDataSource&quot;,&#xd;
    &quot;name&quot;: &quot;default&quot;,&#xd;
    &quot;domainId&quot;: &quot;ba-pom.xmi&quot;,&#xd;
    &quot;modelId&quot;: &quot;BV_MODEL_2&quot;,&#xd;
    &quot;xmi&quot;: &quot;ba-pom.xmi&quot;,&#xd;
    &quot;query&quot;: &quot;&lt;mql&gt;\n&lt;domain_type&gt;relational&lt;/domain_type&gt;\n&lt;domain_id&gt;&lt;![CDATA[ba-pom.xmi]]&gt;&lt;/domain_id&gt;\n&lt;model_id&gt;BV_MODEL_2&lt;/model_id&gt;\n&lt;options&gt;\n&lt;disable_distinct&gt;false&lt;/disable_distinct&gt;\n&lt;/options&gt;\n&lt;parameters&gt;\n&lt;/parameters&gt;\n&lt;selections&gt;\n&lt;/selections&gt;\n&lt;constraints&gt;\n&lt;/constraints&gt;\n&lt;orders&gt;\n&lt;/orders&gt;\n&lt;/mql&gt;\n&quot;,&#xd;
    &quot;queryless&quot;: true&#xd;
  }],&#xd;
  &quot;designQueryLimit&quot;: 500,&#xd;
  &quot;designQueryLimitEnabled&quot;: true,&#xd;
  &quot;disableDistinct&quot;: false,&#xd;
  &quot;fieldSorts&quot;: [],&#xd;
  &quot;fields&quot;: [],&#xd;
  &quot;filters&quot;: [],&#xd;
  &quot;groupSorts&quot;: [],&#xd;
  &quot;groups&quot;: [],&#xd;
  &quot;hasSpec&quot;: false,&#xd;
  &quot;marginBottom&quot;: 18,&#xd;
  &quot;marginLeft&quot;: 18,&#xd;
  &quot;marginRight&quot;: 18,&#xd;
  &quot;marginTop&quot;: 40,&#xd;
  &quot;messages&quot;: [],&#xd;
  &quot;orientation&quot;: 1,&#xd;
  &quot;pageFooters&quot;: [{&#xd;
    &quot;class&quot;: &quot;com.pentaho.iadhoc.model.ThinLabel&quot;,&#xd;
    &quot;format&quot;: {&#xd;
      &quot;backgroundColorStr&quot;: null,&#xd;
      &quot;class&quot;: &quot;com.pentaho.iadhoc.model.ThinFormat&quot;,&#xd;
      &quot;fontBold&quot;: false,&#xd;
      &quot;fontColorStr&quot;: &quot;#aaaaaa&quot;,&#xd;
      &quot;fontItalic&quot;: false,&#xd;
      &quot;fontName&quot;: &quot;Arial&quot;,&#xd;
      &quot;fontSize&quot;: 9,&#xd;
      &quot;fontStrikethrough&quot;: false,&#xd;
      &quot;fontUnderline&quot;: false,&#xd;
      &quot;horizontalAlignmentName&quot;: &quot;LEFT&quot;,&#xd;
      &quot;verticalAlignmentName&quot;: &quot;baseline&quot;&#xd;
    },&#xd;
    &quot;value&quot;: &quot; &quot;&#xd;
  }, {&#xd;
    &quot;class&quot;: &quot;com.pentaho.iadhoc.model.ThinLabel&quot;,&#xd;
    &quot;format&quot;: {&#xd;
      &quot;backgroundColorStr&quot;: null,&#xd;
      &quot;class&quot;: &quot;com.pentaho.iadhoc.model.ThinFormat&quot;,&#xd;
      &quot;fontBold&quot;: false,&#xd;
      &quot;fontColorStr&quot;: &quot;#aaaaaa&quot;,&#xd;
      &quot;fontItalic&quot;: false,&#xd;
      &quot;fontName&quot;: &quot;Arial&quot;,&#xd;
      &quot;fontSize&quot;: 9,&#xd;
      &quot;fontStrikethrough&quot;: false,&#xd;
      &quot;fontUnderline&quot;: false,&#xd;
      &quot;horizontalAlignmentName&quot;: &quot;RIGHT&quot;,&#xd;
      &quot;verticalAlignmentName&quot;: &quot;baseline&quot;&#xd;
    },&#xd;
    &quot;value&quot;: &quot;$(PageofPages)&quot;&#xd;
  }],&#xd;
  &quot;pageFormat&quot;: &quot;LETTER&quot;,&#xd;
  &quot;pageHeaders&quot;: [{&#xd;
    &quot;class&quot;: &quot;com.pentaho.iadhoc.model.ThinLabel&quot;,&#xd;
    &quot;format&quot;: {&#xd;
      &quot;backgroundColorStr&quot;: null,&#xd;
      &quot;class&quot;: &quot;com.pentaho.iadhoc.model.ThinFormat&quot;,&#xd;
      &quot;fontBold&quot;: false,&#xd;
      &quot;fontColorStr&quot;: &quot;#aaaaaa&quot;,&#xd;
      &quot;fontItalic&quot;: false,&#xd;
      &quot;fontName&quot;: &quot;Arial&quot;,&#xd;
      &quot;fontSize&quot;: 9,&#xd;
      &quot;fontStrikethrough&quot;: false,&#xd;
      &quot;fontUnderline&quot;: false,&#xd;
      &quot;horizontalAlignmentName&quot;: &quot;LEFT&quot;,&#xd;
      &quot;verticalAlignmentName&quot;: &quot;baseline&quot;&#xd;
    },&#xd;
    &quot;value&quot;: &quot; &quot;&#xd;
  }, {&#xd;
    &quot;class&quot;: &quot;com.pentaho.iadhoc.model.ThinLabel&quot;,&#xd;
    &quot;format&quot;: {&#xd;
      &quot;backgroundColorStr&quot;: null,&#xd;
      &quot;class&quot;: &quot;com.pentaho.iadhoc.model.ThinFormat&quot;,&#xd;
      &quot;fontBold&quot;: false,&#xd;
      &quot;fontColorStr&quot;: &quot;#aaaaaa&quot;,&#xd;
      &quot;fontItalic&quot;: false,&#xd;
      &quot;fontName&quot;: &quot;Arial&quot;,&#xd;
      &quot;fontSize&quot;: 9,&#xd;
      &quot;fontStrikethrough&quot;: false,&#xd;
      &quot;fontUnderline&quot;: false,&#xd;
      &quot;horizontalAlignmentName&quot;: &quot;RIGHT&quot;,&#xd;
      &quot;verticalAlignmentName&quot;: &quot;baseline&quot;&#xd;
    },&#xd;
    &quot;value&quot;: &quot;$(report.date, date, MMMM dd, yyyy @ hh:mm )&quot;&#xd;
  }],&#xd;
  &quot;parameters&quot;: [],&#xd;
  &quot;queryLimit&quot;: 0,&#xd;
  &quot;queryTimeout&quot;: 0,&#xd;
  &quot;reportFooters&quot;: [{&#xd;
    &quot;class&quot;: &quot;com.pentaho.iadhoc.model.ThinLabel&quot;,&#xd;
    &quot;format&quot;: {&#xd;
      &quot;backgroundColorStr&quot;: null,&#xd;
      &quot;class&quot;: &quot;com.pentaho.iadhoc.model.ThinFormat&quot;,&#xd;
      &quot;fontBold&quot;: false,&#xd;
      &quot;fontColorStr&quot;: &quot;#777777&quot;,&#xd;
      &quot;fontItalic&quot;: false,&#xd;
      &quot;fontName&quot;: &quot;Arial&quot;,&#xd;
      &quot;fontSize&quot;: 12,&#xd;
      &quot;fontStrikethrough&quot;: false,&#xd;
      &quot;fontUnderline&quot;: false,&#xd;
      &quot;horizontalAlignmentName&quot;: &quot;CENTER&quot;,&#xd;
      &quot;verticalAlignmentName&quot;: &quot;baseline&quot;&#xd;
    },&#xd;
    &quot;value&quot;: &quot; &quot;&#xd;
  }],&#xd;
  &quot;reportTitle&quot;: &quot;Untitled&quot;,&#xd;
  &quot;reportTitles&quot;: [{&#xd;
    &quot;class&quot;: &quot;com.pentaho.iadhoc.model.ThinLabel&quot;,&#xd;
    &quot;format&quot;: {&#xd;
      &quot;backgroundColorStr&quot;: null,&#xd;
      &quot;class&quot;: &quot;com.pentaho.iadhoc.model.ThinFormat&quot;,&#xd;
      &quot;fontBold&quot;: false,&#xd;
      &quot;fontColorStr&quot;: &quot;#3d6480&quot;,&#xd;
      &quot;fontItalic&quot;: false,&#xd;
      &quot;fontName&quot;: &quot;Arial&quot;,&#xd;
      &quot;fontSize&quot;: 18,&#xd;
      &quot;fontStrikethrough&quot;: false,&#xd;
      &quot;fontUnderline&quot;: false,&#xd;
      &quot;horizontalAlignmentName&quot;: &quot;LEFT&quot;,&#xd;
      &quot;verticalAlignmentName&quot;: &quot;baseline&quot;&#xd;
    },&#xd;
    &quot;value&quot;: &quot;Untitled&quot;&#xd;
  }, {&#xd;
    &quot;class&quot;: &quot;com.pentaho.iadhoc.model.ThinLabel&quot;,&#xd;
    &quot;format&quot;: {&#xd;
      &quot;backgroundColorStr&quot;: null,&#xd;
      &quot;class&quot;: &quot;com.pentaho.iadhoc.model.ThinFormat&quot;,&#xd;
      &quot;fontBold&quot;: false,&#xd;
      &quot;fontColorStr&quot;: &quot;#3d6480&quot;,&#xd;
      &quot;fontItalic&quot;: false,&#xd;
      &quot;fontName&quot;: &quot;Arial&quot;,&#xd;
      &quot;fontSize&quot;: 14,&#xd;
      &quot;fontStrikethrough&quot;: false,&#xd;
      &quot;fontUnderline&quot;: false,&#xd;
      &quot;horizontalAlignmentName&quot;: &quot;LEFT&quot;,&#xd;
      &quot;verticalAlignmentName&quot;: &quot;baseline&quot;&#xd;
    },&#xd;
    &quot;value&quot;: &quot; &quot;&#xd;
  }],&#xd;
  &quot;sourceReport&quot;: null,&#xd;
  &quot;systemQueryLimit&quot;: 100000,&#xd;
  &quot;templateName&quot;: &quot;0_crystal_1_left_aligned.prpt&quot;,&#xd;
  &quot;version&quot;: 2&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiFile}/${path}</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify StatusCode 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Overwrite Path Permissions" enabled="true">
            <stringProp name="TestPlan.comments">Given variables ( path, user and permission )
When setUpData contains permission
Then overwrite all permissions path to user and Admin
</stringProp>
            <stringProp name="IfController.condition">${__groovy(
 vars.get(&quot;setUpData&quot;)!=null &amp;&amp;
 vars.get(&quot;setUpData&quot;).toLowerCase().split(&quot;\,&quot;).toString().trim().contains(&quot;path&quot;) &amp;&amp;
 vars.get(&quot;setUpData&quot;).toLowerCase().split(&quot;\,&quot;).toString().trim().contains(&quot;user&quot;) &amp;&amp;
 vars.get(&quot;setUpData&quot;).toLowerCase().split(&quot;\,&quot;).toString().trim().contains(&quot;permission&quot;) 
)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Overwrite Path Permissions" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET properties" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiFile}/${path}/properties</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract ID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="Scope.variable">id</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT acl" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;repositoryFileAclDto&gt;&#xd;
  &lt;entriesInheriting&gt;false&lt;/entriesInheriting&gt;&#xd;
  &lt;id&gt;${id}&lt;/id&gt;&#xd;
  &lt;owner&gt;admin&lt;/owner&gt;&#xd;
  &lt;ownerType&gt;0&lt;/ownerType&gt;&#xd;
  &lt;aces&gt;&#xd;
    &lt;modifiable&gt;true&lt;/modifiable&gt;&#xd;
    &lt;recipient&gt;admin&lt;/recipient&gt;&#xd;
    &lt;recipientType&gt;0&lt;/recipientType&gt;&#xd;
    &lt;permissions&gt;4&lt;/permissions&gt;&#xd;
  &lt;/aces&gt;&#xd;
  &lt;aces&gt;&#xd;
    &lt;modifiable&gt;true&lt;/modifiable&gt;&#xd;
    &lt;recipient&gt;${user}&lt;/recipient&gt;&#xd;
    &lt;recipientType&gt;0&lt;/recipientType&gt;&#xd;
    ${xmlPermission}&#xd;
  &lt;/aces&gt;&#xd;
&lt;/repositoryFileAclDto&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiFile}/${path}/acl</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTPHeaderManager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/xml</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Set xmlPermission" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def xmlPermission = &apos;&apos;
def lstPermission = vars.get(&apos;permission&apos;).trim().tokenize(&apos;,&apos;)
lstPermission.each {xmlPermission += &apos;&lt;permissions&gt;&apos; + it + &apos;&lt;/permissions&gt; \n&apos;}
vars.put(&apos;xmlPermission&apos;, xmlPermission)</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Set Path Permission to User" enabled="true">
            <stringProp name="TestPlan.comments">Given variables ( path, user and permission )
When setUpData contains permission
Then overwrite all permissions path to user and Admin
</stringProp>
            <stringProp name="IfController.condition">${__groovy(
 vars.get(&quot;setUpData&quot;)!=null &amp;&amp;
 vars.get(&quot;setUpData&quot;).toLowerCase().split(&quot;\,&quot;).toString().trim().contains(&quot;path&quot;) &amp;&amp;
 vars.get(&quot;setUpData&quot;).toLowerCase().split(&quot;\,&quot;).toString().trim().contains(&quot;user&quot;) &amp;&amp;
 vars.get(&quot;setUpData&quot;).toLowerCase().split(&quot;\,&quot;).toString().trim().contains(&quot;permission&quot;) 
)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Set Path Permission to User" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET acl" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiFile}/${path}/acl</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTPHeaderManager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/xml</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT acl" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${putAcl}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiFile}/${path}/acl</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTPHeaderManager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/xml</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="set putAcl" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.xml.XmlUtil

def aclResponse = prev.getResponseDataAsString()
def xmlParsed = new XmlParser().parseText(aclResponse)
def node = xmlParsed.&apos;**&apos;.find {it.name() == &apos;aces&apos; &amp;&amp; it.recipient.text() == vars.get(&apos;user&apos;).trim()}
def strFinder = getFinder(node)
def replaceData = createUserTag(vars.get(&apos;permission&apos;), vars.get(&apos;user&apos;), node)

def putAcl = aclResponse.replace(strFinder, replaceData) // replace node with new substring
vars.put(&apos;putAcl&apos;, putAcl)

def getFinder(def node) { // Locate Tag to Update as an substring
    if (node != null) {
        str = XmlUtil.serialize(node).toString()
        str = str.replace(&apos;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&apos;, &apos;&apos;)
        str = str.trim().replace(&quot;\n&quot;, &quot;&quot;).replace(&quot;\r&quot;, &quot;&quot;)  // Removing line breaks from string
        return str = str.replace(&apos;&gt;  &lt;&apos;, &apos;&gt;&lt;&apos;)
    } else {
        return &apos;&lt;/aces&gt;&apos;
    }
}

def createUserTag(def permission, def user, def node) {// create xml tag of permission and user as an substring
    if (permission.trim().size() &gt; 0) {
        def lstPermission = permission.trim().tokenize(&apos;,&apos;)
        def xmlPermission = &apos;&apos;
        lstPermission.each {xmlPermission += &apos;&lt;permissions&gt;&apos; + it + &apos;&lt;/permissions&gt;&apos;}
        def xmlStr = &apos;&lt;aces&gt;&lt;modifiable&gt;true&lt;/modifiable&gt;&lt;recipient&gt;&apos; + user + &apos;&lt;/recipient&gt;&lt;recipientType&gt;0&lt;/recipientType&gt;&apos; + xmlPermission + &apos;&lt;/aces&gt;&apos;
        if (node != null) {
            return xmlStr
        } else {
            return &apos;&lt;/aces&gt;&apos; + xmlStr
        }
    } else return &apos;&apos;
}</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify StatusCode 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Data Sources" enabled="false"/>
      <hashTree/>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Carte" enabled="false"/>
      <hashTree/>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Schedules" enabled="false"/>
      <hashTree/>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="User Role Management" enabled="true"/>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Users and Roles for Pentaho Security" enabled="false"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Assign Role to User" enabled="true">
            <stringProp name="TestPlan.comments">  Given variables (setUpData, role, user)
  When setUpData contains &quot;role&quot; and &quot;user&quot;
  Then Assign Role to User</stringProp>
            <stringProp name="IfController.condition">${__groovy(
 vars.get(&quot;setUpData&quot;)!=null &amp;&amp;
 vars.get(&quot;setUpData&quot;).toLowerCase().split(&quot;\,&quot;).toString().trim().contains(&quot;role&quot;) &amp;&amp;
 vars.get(&quot;setUpData&quot;).toLowerCase().split(&quot;\,&quot;).toString().trim().contains(&quot;user&quot;)
)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT assignUserToRole" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${apiUserRole}/assignUserToRole?userNames=${user}&amp;roleName=${role}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify StatusCode 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Create User" enabled="true">
            <stringProp name="TestPlan.comments">  Given variables (setUpData, user)
  When setUpData contains &quot;user&quot;
  and user is not null or is not &quot;default user&quot; [admin,suzy,pat,tiffany]
  Then Delete user if exists
  and create user</stringProp>
            <stringProp name="IfController.condition">${__groovy(
 vars.get(&quot;setUpData&quot;)!=null &amp;&amp; 
 vars.get(&quot;setUpData&quot;).toLowerCase().split(&quot;\,&quot;).toString().trim().contains(&quot;user&quot;) &amp;&amp;
 vars.get(&quot;user&quot;)!=null &amp;&amp; ![&quot;admin&quot;\,&quot;suzy&quot;\,&quot;pat&quot;\,&quot;tiffany&quot;].contains(vars.get(&quot;user&quot;).toLowerCase().trim())
)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Create User" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT deleteUsers" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiUserRole}/deleteUsers?userNames=${user}%09</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT createUser" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;userName&quot;: &quot;${user}&quot;, &quot;password&quot;: &quot;password&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiUserRole}/createUser</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify StatusCode 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Create Role" enabled="true">
            <stringProp name="TestPlan.comments">  Given variables (setUpData, role, rolePermission)
  When setUpData contains role
  and role is not null
  and role is not default role [&quot;Administrator&quot;,&quot;Power User&quot;,&quot;Report Author&quot;,&quot;Business Analyst&quot;,&quot;NoPermissions&quot;]
  Then Delete role if exists
  and create role
  and assign rolePermission to role</stringProp>
            <stringProp name="IfController.condition">${__groovy(
 vars.get(&quot;setUpData&quot;)!=null &amp;&amp;
 vars.get(&quot;setUpData&quot;).toLowerCase().split(&quot;\,&quot;).toString().trim().contains(&quot;role&quot;) &amp;&amp;
 vars.get(&quot;role&quot;)!=null &amp;&amp;
 ! [&quot;administrator&quot;\,&quot;power user&quot;\,&quot;report author&quot;\,&quot;business analyst&quot;].contains(vars.get(&quot;role&quot;).toLowerCase().trim())
)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Create Role" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT deleteRoles" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiUserRole}/deleteRoles?roleNames=${role}</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT createRole" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiUserRole}/createRole?roleName=${role}</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify StatusCode 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT roleAssignments" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;assignments&quot;:[{&quot;roleName&quot;:&quot;${role}&quot;, &quot;logicalRoles&quot;:${rolePermission}}]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiUserRole}/roleAssignments</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">//Insert quotes at String
String delimiter = vars.get(&quot;delimiter2nd&quot;)
String str = vars.get(&apos;rolePermission&apos;)
def permissions = [read: &quot;org.pentaho.repository.read&quot;
	,create: &quot;org.pentaho.repository.create&quot;
	,execute: &quot;org.pentaho.repository.execute&quot;
	,publish: &quot;org.pentaho.security.publish&quot;
	,scheduler: &quot;org.pentaho.scheduler.manage&quot;
	,datasource: &quot;org.pentaho.platform.dataaccess.datasource.security.manage&quot;
	,administerSecurity: &quot;org.pentaho.security.administerSecurity&quot;]

List list = str.tokenize(delimiter)
def strFormated = list.collect{ &apos;&quot;&apos; + permissions.&quot;$it&quot; + &apos;&quot;&apos;}.toString()

vars.put(&apos;rolePermission&apos;,strFormated)</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify StatusCode 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Delete User" enabled="true">
            <stringProp name="TestPlan.comments">  Given variables (setUpData, user)
  When setUpData contains &quot;user&quot;
  and user is not null
  and user is not default user [admin,suzy,pat,tiffany]
  Then delete user
  and delete user default directory if exists</stringProp>
            <stringProp name="IfController.condition">${__groovy(
vars.get(&quot;setUpData&quot;)!=null &amp;&amp; 
vars.get(&quot;setUpData&quot;).toLowerCase().split(&quot;\,&quot;).toString().trim().contains(&quot;user&quot;) &amp;&amp;
vars.get(&quot;user&quot;)!=null &amp;&amp; ![&quot;admin&quot;\,&quot;suzy&quot;\,&quot;pat&quot;\,&quot;tiffany&quot;].contains(vars.get(&quot;user&quot;).toLowerCase().trim())
)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Delete User" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT deleteUsers" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiUserRole}/deleteUsers?userNames=${user}</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET properties" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiFile}/:home:${user}/properties</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract ID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="Scope.variable">id</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname=" IF User Directory ID Exists" enabled="true">
                <stringProp name="IfController.condition">${__groovy(
	vars.get(&quot;id&quot;) != &quot;&quot;
	)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT deletepermanent" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${apiFile}/deletepermanent</stringProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify StatusCode 200" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Delete Role" enabled="true">
            <stringProp name="TestPlan.comments">    Given variables (setUpData, role)
    When setUpData contains &quot;role&quot;
    and role is not null
    and role is not default [&quot;Administrator&quot;,&quot;Power User&quot;,&quot;Report Author&quot;,&quot;Business Analyst&quot;,&quot;NoPermissions&quot;]
    Then Delete role</stringProp>
            <stringProp name="IfController.condition">${__groovy(
vars.get(&quot;setUpData&quot;)!=null &amp;&amp;
vars.get(&quot;setUpData&quot;).toLowerCase().split(&quot;\,&quot;).toString().trim().contains(&quot;role&quot;) &amp;&amp;
vars.get(&quot;role&quot;)!=null &amp;&amp;
! [&quot;administrator&quot;\,&quot;power user&quot;\,&quot;report author&quot;\,&quot;business analyst&quot;].contains(vars.get(&quot;role&quot;).toLowerCase().trim())
)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Delete Role" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT deleteRoles" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${apiUserRole}/deleteRoles?roleNames=${role}</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
