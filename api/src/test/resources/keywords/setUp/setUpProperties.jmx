<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Test Fragment" enabled="false"/>
    <hashTree>
      <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="setUp Plan - Settings Properties" enabled="true">
        <boolProp name="TransactionController.includeTimers">false</boolProp>
        <stringProp name="TestPlan.comments">
          Scenario: Get settings properties to run test suite
          Given variables rampUpDivisor and delimiterCsv
          When execute script
          Then create &lt;properties&gt;

          | properties | description                                |
          | countLines | rows number at csv file  (less the header) |
          | rampUp     | division between nÂº rows and rampUpDivisor |
          | csvFile    | name of csv file                           |
          | csvColumns | list of columns in csv file                |
</stringProp>
        <boolProp name="TransactionController.parent">true</boolProp>
      </TransactionController>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="setUp Plan - Settings Properties" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.jmeter.services.FileServer
import org.apache.jmeter.functions.TestPlanName

def dirPath = FileServer.getFileServer().getBaseDir()
def csvFile = new TestPlanName().execute().minus(&quot;.jmx&quot;) + &quot;.tsv&quot;
checkFileExist(dirPath+&quot;/&quot;+csvFile)
def countLines = countCsvLines(dirPath, csvFile)

props.put(&quot;countLines&quot;, countLines.toString()) // Set jmeter property Total number of tests
props.put(&quot;rampUp&quot;, calculateRampUp(countLines, vars.get(&quot;rampUpDivisor&quot;)))
props.put(&quot;csvFile&quot;, csvFile)
props.put(&quot;csvColumns&quot;, getColumnsHeaders(dirPath, csvFile, vars.get(&quot;delimiterCsv&quot;)))

writeResponseMessage([&quot;countLines&quot;,&quot;rampUp&quot;,&quot;csvFile&quot;,&quot;csvColumns&quot;]) 

def calculateRampUp(def numberThreads, def rampUpDivisor) {
    double r = Double.parseDouble(rampUpDivisor)
    if (r != null &amp;&amp; r != 0) {
        return Math.round(numberThreads.toInteger() / r).toString()
    }
    return numberThreads
}

def countCsvLines(String directory, String file) {
    try {
        new File(directory, file).readLines().size() - 1 // -1 minus header
    } catch (e) {
        log.error(&quot;__________________ Script Error: There is no lines on : &quot; + directory + &apos;\\&apos; + file)
        return &quot;&quot;
    }
}

def getColumnsHeaders(String directory, String file, String delimiter) {
    try {
        new File(directory, file).withReader {it.readLine().replaceAll(delimiter, &quot;,&quot;)}
    } catch (e) {
        log.error(&quot;__________________ Script Error: There is no lines on : &quot; + directory + &apos;\\&apos; + file)
        return &quot;&quot;
    }
}

def checkFileExist(String filePath) {
    file = new File(filePath)
    if (file.exists()) {
        return true
    } else {
        log.error(&quot;__________________ Script Error: There is no file with path: &quot; + filePath)
        return false
    }
}

def writeResponseMessage(List lst) {
    def responseMessage = &quot;&quot;
    lst.each{ it -&gt; responseMessage += &quot;props.get($it) = &quot; + props.get(it).toString() + &quot;\n&quot;}
    SampleResult.setResponseData(responseMessage, &quot;UTF-8&quot;)
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
