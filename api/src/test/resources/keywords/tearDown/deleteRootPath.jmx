<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Test Fragment" enabled="false"/>
    <hashTree>
      <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Delete Root Paths" enabled="true">
        <boolProp name="TransactionController.includeTimers">false</boolProp>
        <boolProp name="TransactionController.parent">true</boolProp>
        <stringProp name="TestPlan.comments">
        Delete Root Path
        Given variables csvFile, path, setUpData, delimiterCsv
        When setUpData contains &quot;path&quot; string
        Then get list of atomic paths # *1
        And Delete each path in List if path id exist

        *1 atomic paths are:
        The root file/directory to delete excluding default ones
</stringProp>
      </TransactionController>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="SetUp Variables" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">//Conditions to run deletePathPermanently.jmx
String adminLogin = &quot;admin:password&quot;.bytes.encodeBase64().toString();
adminLogin = &quot;Basic &quot; + adminLogin;
vars.put(&quot;adminLogin&quot;, adminLogin);

vars.put(&quot;setUpData&quot;,&quot;path&quot;)

writeResponseMessage([&quot;adminLogin&quot;, &quot;setUpData&quot;])

def writeResponseMessage(List lst) {
    def responseMessage = &quot;&quot;
    lst.each {it -&gt; responseMessage += &quot;vars.get($it) = &quot; + vars.get(&quot;$it&quot;).toString() + &quot;\n&quot;}
    SampleResult.setResponseData(responseMessage, &quot;UTF-8&quot;)
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Get Distint Root Paths to Delete" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.jmeter.engine.util.CompoundVariable
import org.apache.jmeter.services.FileServer

log.info(&quot;__________________ Script Info: Beginning delete root paths.&quot;);

def dirPath = FileServer.getFileServer().getBaseDir()
log.info(&quot;__________________ Script Info: dirPath: &quot; + dirPath);

String file = props.get(&quot;csvFile&quot;)
log.info(&quot;__________________ Script Info: file: &quot; + file);

String delimiter = vars.get(&quot;delimiterCsv&quot;)
log.info(&quot;__________________ Script Info: delimiter: &quot; + delimiter);

Integer posPath = getColumnPosition(dirPath, file, &quot;path&quot;, delimiter)
log.info(&quot;__________________ Script Info: posPath: &quot; + posPath.toString());

Integer posSetUpData = getColumnPosition(dirPath, file, &quot;setUpData&quot;, delimiter)
log.info(&quot;__________________ Script Info: posSetUpData: &quot; + posSetUpData.toString());

if (posPath &gt;= 0 &amp;&amp; posSetUpData &gt;= 0) {
    List pathList = getPathList(dirPath, file, posPath, posSetUpData, delimiter)
    log.info(&quot;__________________ Script Info: Path list: &quot; + pathList);
    
    List pathListToDelete = returnPathListToDelete(pathList)
    log.info(&quot;__________________ Script Info: Path list to delete: &quot; + pathListToDelete);
    
    setIterateValues(pathListToDelete, &quot;path&quot;)
} else {
    log.warn(&quot;__________________ Script Warning: On&quot; + file + &quot; file don&apos;t was founded one of columns [path,setUpData]&quot;)
}

def checkFileExist(String filePath) {
    file = new File(filePath)
    if (file.exists()) {
        return true
    } else {
        log.error(&quot;__________________ Script Error: There is no file with path: &quot; + filePath)
        return false
    }
}

def getColumnPosition(String directory, String fileName, String column, String delimiter) {
    if (checkFileExist(directory + &quot;/&quot; + fileName)) {
        new File(directory, fileName).withReader {lst = it.readLine().split(delimiter)}
        return lst.findIndexOf {it in [column]}
    } else {
        return -1
    }
}

def getPathList(String directory, String fileName, Integer posPath, Integer posSetUpData, String delimiter) {
    def pathList = []
    def setUpdata = &quot;&quot;
    def path = &quot;&quot;
    new File(directory, fileName).splitEachLine(delimiter) {
        it -&gt;
            setUpData = it[posSetUpData]
            path = evalVariable(it[posPath])
            if (path != null &amp;&amp; path.trim().length()&gt;0) {
                if (setUpData != null &amp;&amp; setUpData.toLowerCase().split(&quot;,&quot;)*.trim().contains(&quot;noencode&quot;)) {
                    pathList.add(path)
                } else {
                    pathList.add(encodeVariable(path))
                }
            }
    }
    pathList.remove(0)// remove header from list    
    return pathList
}

def returnPathListToDelete(List lst) {
    def listToDelete = []
    lst.each {
        it = it.replace(&quot;%3A&quot;,&quot;:&quot;) // for the cases where is encoded
        def level = it.trim().tokenize(&quot;:&quot;)
        size = level.size() - 1 // last pos is always null

        if ((![&quot;home&quot;, &quot;public&quot;].contains(level[0])) &amp;&amp; size &gt;= 0) {
            listToDelete.add(level[0])
        } else if (!([&quot;admin&quot;, &quot;suzy&quot;, &quot;pat&quot;, &quot;tiffany&quot;].contains(level[1])) &amp;&amp; size &gt; 0) {
            listToDelete.add(level[0] + &quot;:&quot; + level[1])
        } else if (size &gt; 1) {
            listToDelete.add(level[0] + &quot;:&quot; + level[1] + &quot;:&quot; + level[2])
        }
    }
    return listToDelete.unique().sort()
}

def setIterateValues(List lst, String varName) {
    lst.eachWithIndex {it, index -&gt; vars.put(varName + &quot;_&quot; + (index + 1), it)} // +1 to sincronize to thread index
    writeResponseMessage(lst)
}

def writeResponseMessage(List lst) {
    def responseMessage = &quot;&quot;
    lst.each {it -&gt; responseMessage += it + &quot;\n&quot;}
    SampleResult.setResponseData(responseMessage, &quot;UTF-8&quot;)
}

def evalVariable(String var) {
    // return an string with result of evaluation
    if (var != null &amp;&amp; var.contains(&quot;{&quot;)) {
    	   var = var.replace(&apos;{quote}&apos;,&apos;&quot;&apos;)    	
        CompoundVariable compoundVar = new CompoundVariable(var)
        return compoundVar.execute()
    }
    return var
}

def encodeVariable(String var) {
    // return an string encoded
    String str = java.net.URLEncoder.encode(var, &quot;UTF-8&quot;)
    return str.replaceAll(&quot;\\+&quot;, &quot;%20&quot;)
}
</stringProp>
          <stringProp name="TestPlan.comments">
        Get list of atomic paths
        Given variables csvFile, path, setUpData, delimiterCsv
        When csvFile exist
        And csvFile contains columns path, setUpData
        Then Get path values where setUpData contains &quot;paths&quot;
        And extract root path value
        And remove duplicate and null values
        And return list as iterable JMeter Variable
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Path" enabled="true">
          <stringProp name="ForeachController.inputVal">path</stringProp>
          <stringProp name="ForeachController.returnVal">path</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Delete Path" enabled="true">
            <stringProp name="IncludeController.includepath">resources/keywords/api/fileManagement/deletePathPermanently.jmx</stringProp>
          </IncludeController>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
