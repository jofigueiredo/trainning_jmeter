<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Test Fragment" enabled="true"/>
    <hashTree>
      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Set Path Permission to User" enabled="true">
        <stringProp name="TestPlan.comments">
          Given variables ( path, user and permission )
          When setUpData contains permission
          Then update only permission of user
        </stringProp>
        <stringProp name="IfController.condition">${__groovy(
         vars.get(&quot;setUpData&quot;)!=null &amp;&amp;
         vars.get(&quot;setUpData&quot;).toLowerCase().split(&quot;\,&quot;).toString().trim().contains(&quot;path&quot;) &amp;&amp;
         vars.get(&quot;setUpData&quot;).toLowerCase().split(&quot;\,&quot;).toString().trim().contains(&quot;user&quot;) &amp;&amp;
         vars.get(&quot;setUpData&quot;).toLowerCase().split(&quot;\,&quot;).toString().trim().contains(&quot;permission&quot;)
         )}</stringProp>
        <boolProp name="IfController.evaluateAll">false</boolProp>
        <boolProp name="IfController.useExpression">true</boolProp>
      </IfController>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Set Path Permission to User" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET acl" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/pentaho/api/repo/files/${path}/acl</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTPHeaderManager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/xml</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT acl" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${putAcl}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/pentaho/api/repo/files/${path}/acl</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTPHeaderManager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/xml</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="set putAcl" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.xml.XmlUtil

def aclResponse = prev.getResponseDataAsString()
def xmlParsed = new XmlParser().parseText(aclResponse)
def node = xmlParsed.&apos;**&apos;.find {it.name() == &apos;aces&apos; &amp;&amp; it.recipient.text() == vars.get(&apos;user&apos;).trim()}
def strFinder = getFinder(node)
def replaceData = createUserTag(vars.get(&apos;permission&apos;), vars.get(&apos;user&apos;), node)

def putAcl = aclResponse.replace(strFinder, replaceData) // replace node with new substring
vars.put(&apos;putAcl&apos;, putAcl)

def getFinder(def node) { // Locate Tag to Update as an substring
    if (node != null) {
        str = XmlUtil.serialize(node).toString()
        str = str.replace(&apos;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&apos;, &apos;&apos;)
        str = str.trim().replace(&quot;\n&quot;, &quot;&quot;).replace(&quot;\r&quot;, &quot;&quot;)  // Removing line breaks from string
        return str = str.replace(&apos;&gt;  &lt;&apos;, &apos;&gt;&lt;&apos;)
    } else {
        return &apos;&lt;/aces&gt;&apos;
    }
}

def createUserTag(def permission, def user, def node) {// create xml tag of permission and user as an substring
    if (permission.trim().size() &gt; 0) {
        def lstPermission = permission.trim().tokenize(&apos;,&apos;)
        def xmlPermission = &apos;&apos;
        lstPermission.each {xmlPermission += &apos;&lt;permissions&gt;&apos; + it + &apos;&lt;/permissions&gt;&apos;}
        def xmlStr = &apos;&lt;aces&gt;&lt;modifiable&gt;true&lt;/modifiable&gt;&lt;recipient&gt;&apos; + user + &apos;&lt;/recipient&gt;&lt;recipientType&gt;0&lt;/recipientType&gt;&apos; + xmlPermission + &apos;&lt;/aces&gt;&apos;
        if (node != null) {
            return xmlStr
        } else {
            return &apos;&lt;/aces&gt;&apos; + xmlStr
        }
    } else return &apos;&apos;
}</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify StatusCode 2XX" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">2\d{2}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.custom_message">The response code is not a 2xx code. Actual response code: ${__groovy(prev.getResponseCode())} </stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
